# python.py
import streamlit as st
import pandas as pd
import numpy as np
from io import BytesIO
from google import genai
from google.genai.errors import APIError

# --------- NEW: ƒë·ªçc file Word ----------
try:
    from docx import Document
except Exception as e:
    Document = None

# ================== C·∫§U H√åNH TRANG ==================
st.set_page_config(page_title="ƒê√°nh gi√° Ph∆∞∆°ng √°n Kinh doanh (Word) ‚Äì Streamlit", layout="wide")
st.title("üìÑ ƒê√°nh gi√° Ph∆∞∆°ng √°n Kinh doanh t·ª´ file Word")

st.caption(
    "T·∫£i ph∆∞∆°ng √°n (.docx) ‚Üí B·∫•m **L·ªçc d·ªØ li·ªáu b·∫±ng AI** ‚Üí T·ª± ƒë·ªông t·∫°o *b·∫£ng d√≤ng ti·ªÅn* v√† *c√°c ch·ªâ s·ªë hi·ªáu qu·∫£*: "
    "**NPV, IRR, PP, DPP**. B·∫°n c√≥ th·ªÉ y√™u c·∫ßu AI ph√¢n t√≠ch k·∫øt qu·∫£ ngay trong app."
)

# ================== TI·ªÜN √çCH CHUNG ==================
def fmt_percent(x):
    try:
        return f"{float(x)*100:.2f}%"
    except:
        return "‚Äî"

def to_float_safe(x, default=None):
    try:
        if x is None: return default
        if isinstance(x, str):
            x = x.replace(",", "").replace("%", "").strip()
        return float(x)
    except:
        return default

def irr_bisection(cashflows, low=-0.999999, high=10.0, tol=1e-6, max_iter=200):
    """
    IRR t√¨m nghi·ªám NPV=0 b·∫±ng nh·ªã ph√¢n.
    Tr·∫£ v·ªÅ None n·∫øu kh√¥ng h·ªôi t·ª• ho·∫∑c kh√¥ng c√≥ ƒë·ªïi d·∫•u.
    """
    def npv(rate):
        return sum(cf / ((1 + rate) ** t) for t, cf in enumerate(cashflows))
    try:
        f_low = npv(low)
        f_high = npv(high)
        # N·∫øu kh√¥ng ƒë·ªïi d·∫•u, m·ªü r·ªông t√¨m bi√™n ƒë·ªô
        expand = 0
        while f_low * f_high > 0 and expand < 6:
            high *= 2
            f_high = npv(high)
            expand += 1
        if f_low * f_high > 0:
            return None
        for _ in range(max_iter):
            mid = (low + high) / 2
            f_mid = npv(mid)
            if abs(f_mid) < tol:
                return mid
            if f_low * f_mid < 0:
                high, f_high = mid, f_mid
            else:
                low, f_low = mid, f_mid
        return (low + high) / 2
    except Exception:
        return None

def payback_period(cashflows):
    """
    PP: th·ªùi ƒëi·ªÉm t√≠ch l≈©y d√≤ng ti·ªÅn (kh√¥ng chi·∫øt kh·∫•u) >= 0.
    N·ªôi suy tuy·∫øn t√≠nh trong nƒÉm ƒë·∫°t ƒëi·ªÉm ho√†n v·ªën.
    Tr·∫£ v·ªÅ s·ªë nƒÉm (float) ho·∫∑c None.
    """
    cum = 0.0
    for t in range(len(cashflows)):
        prev = cum
        cum += cashflows[t]
        if cum >= 0:
            if t == 0:  # ho√†n v·ªën ngay t·∫°i t0
                return 0.0
            # n·ªôi suy trong nƒÉm t
            needed = -prev
            if cashflows[t] == 0:
                return float(t)
            frac = needed / cashflows[t]
            return (t - 1) + (1 - frac)
    return None

def discounted_payback_period(cashflows, rate):
    """
    DPP: th·ªùi ƒëi·ªÉm t√≠ch l≈©y d√≤ng ti·ªÅn chi·∫øt kh·∫•u >= 0.
    N·ªôi suy tuy·∫øn t√≠nh trong nƒÉm ƒë·∫°t ƒëi·ªÉm ho√†n v·ªën chi·∫øt kh·∫•u.
    """
    cum = 0.0
    for t in range(len(cashflows)):
        prev = cum
        cf_disc = cashflows[t] / ((1 + rate) ** t)
        cum += cf_disc
        if cum >= 0:
            if t == 0:
                return 0.0
            needed = -prev
            if cf_disc == 0:
                return float(t)
            frac = needed / cf_disc
            return (t - 1) + (1 - frac)
    return None

def straight_line_depreciation(capex, life_years):
    if life_years and life_years > 0:
        return capex / life_years
    return 0.0

def build_cashflow_table(
    investment_capex,
    project_life_years,
    annual_revenues,
    annual_costs,
    wacc,
    tax_rate,
    revenue_growth=None,
    cost_growth=None,
    depreciation_mode="straight_line"
):
    """
    T·∫°o b·∫£ng FCFF (Free Cash Flow to Firm).
    Quy ∆∞·ªõc:
      - CF nƒÉm 0: -Capex (d√≤ng ti·ªÅn ra ƒë·∫ßu t∆∞)
      - Kh·∫•u hao: m·∫∑c ƒë·ªãnh ƒë∆∞·ªùng th·∫≥ng
      - EBIT = Doanh thu - Chi ph√≠ - Kh·∫•u hao
      - Thu·∫ø = max(EBIT, 0) * thu·∫ø_su·∫•t
      - FCFF = EBIT*(1 - tax) + Kh·∫•u hao  (nƒÉm >=1), nƒÉm 0 = -Capex
    Cho ph√©p annual_revenues/costs l√† scalar ho·∫∑c list ƒë·ªô d√†i = project_life_years.
    N·∫øu c√≥ t·ª∑ l·ªá tƒÉng tr∆∞·ªüng, √°p d·ª•ng tƒÉng d·∫ßn theo nƒÉm (CAGR ƒë∆°n gi·∫£n).
    """
    n = int(project_life_years or 0)
    if n <= 0:
        raise ValueError("D√≤ng ƒë·ªùi d·ª± √°n (nƒÉm) ph·∫£i > 0.")

    # Chu·∫©n h√≥a revenue/cost list
    def expand_series(x, growth, n):
        # N·∫øu x l√† list/tuple v√† ƒë·ªß ƒë·ªô d√†i th√¨ d√πng lu√¥n
        if isinstance(x, (list, tuple, np.ndarray)) and len(x) >= n:
            return [to_float_safe(v, 0.0) for v in x[:n]]
        # N·∫øu x l√† 1 s·ªë ‚Üí t·∫°o chu·ªói theo tƒÉng tr∆∞·ªüng
        base = to_float_safe(x, 0.0)
        g = to_float_safe(growth, 0.0)
        series = []
        for t in range(1, n + 1):
            # nƒÉm 1 = base, nƒÉm t = base * (1+g)^(t-1)
            series.append(base * ((1 + g) ** (t - 1)))
        return series

    rev = expand_series(annual_revenues, revenue_growth, n)
    cost = expand_series(annual_costs, cost_growth, n)

    dep = 0.0
    if depreciation_mode == "straight_line":
        dep = straight_line_depreciation(to_float_safe(investment_capex, 0.0), n)

    rows = []
    # NƒÉm 0 (ƒë·∫ßu t∆∞)
    rows.append({
        "NƒÉm": 0,
        "Doanh thu": 0.0,
        "Chi ph√≠": 0.0,
        "Kh·∫•u hao": 0.0,
        "EBIT": 0.0,
        "Thu·∫ø": 0.0,
        "FCFF": -to_float_safe(investment_capex, 0.0)
    })

    for t in range(1, n + 1):
        r = rev[t - 1]
        c = cost[t - 1]
        ebit = r - c - dep
        tax = max(ebit, 0.0) * to_float_safe(tax_rate, 0.0)
        fcff = (ebit * (1 - to_float_safe(tax_rate, 0.0))) + dep
        rows.append({
            "NƒÉm": t,
            "Doanh thu": r,
            "Chi ph√≠": c,
            "Kh·∫•u hao": dep,
            "EBIT": ebit,
            "Thu·∫ø": tax,
            "FCFF": fcff
        })

    df = pd.DataFrame(rows)
    # NPV & IRR
    rate = to_float_safe(wacc, 0.0)
    cashflows = df["FCFF"].tolist()
    npv = sum(cf / ((1 + rate) ** t) for t, cf in enumerate(cashflows))
    irr = irr_bisection(cashflows)

    pp = payback_period(cashflows)
    dpp = discounted_payback_period(cashflows, rate)

    return df, npv, irr, pp, dpp

# ================== G·ªåI GEMINI ==================
def get_gemini_client():
    api_key = st.secrets.get("GEMINI_API_KEY", None)
    if api_key is None:
        # Th·ª≠ ƒë·ªçc t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
        import os
        api_key = os.environ.get("GEMINI_API_KEY")
    if not api_key:
        st.error("Kh√¥ng t√¨m th·∫•y kh√≥a `GEMINI_API_KEY` trong Secrets ho·∫∑c bi·∫øn m√¥i tr∆∞·ªùng.")
        return None
    try:
        client = genai.Client(api_key=api_key)
        return client
    except Exception as e:
        st.error(f"L·ªói kh·ªüi t·∫°o Gemini Client: {e}")
        return None

EXTRACTION_SYSTEM_PROMPT = """
B·∫°n l√† m·ªôt tr·ª£ l√Ω t·∫°o c·∫•u tr√∫c d·ªØ li·ªáu cho ph∆∞∆°ng √°n kinh doanh. 
H√£y ph√¢n t√≠ch vƒÉn b·∫£n v√† TR·∫¢ V·ªÄ JSON h·ª£p l·ªá, KH√îNG k√®m gi·∫£i th√≠ch.
Tr∆∞·ªùng b·∫Øt bu·ªôc:
- investment_capex: s·ªë ti·ªÅn ƒë·∫ßu t∆∞ ban ƒë·∫ßu (VND)
- project_life_years: s·ªë nƒÉm ho·∫°t ƒë·ªông (int)
- revenues: c√≥ th·ªÉ l√† s·ªë (doanh thu nƒÉm 1) ho·∫∑c m·∫£ng s·ªë (theo t·ª´ng nƒÉm)
- costs: c√≥ th·ªÉ l√† s·ªë (chi ph√≠ nƒÉm 1) ho·∫∑c m·∫£ng s·ªë (theo t·ª´ng nƒÉm)
- wacc_percent: % WACC (0-100)
- tax_rate_percent: % thu·∫ø TNDN (0-100)
Tr∆∞·ªùng t√πy ch·ªçn:
- revenue_growth_percent: % tƒÉng tr∆∞·ªüng doanh thu m·ªói nƒÉm (n·∫øu revenues l√† 1 s·ªë)
- cost_growth_percent: % tƒÉng tr∆∞·ªüng chi ph√≠ m·ªói nƒÉm (n·∫øu costs l√† 1 s·ªë)
- notes: chu·ªói ng·∫Øn ghi ch√∫

V√≠ d·ª• JSON:
{
 "investment_capex": 12000000000,
 "project_life_years": 7,
 "revenues": [3500000000, 3605000000, 3713150000, 3824544500, 394,  ...],
 "costs": 2000000000,
 "wacc_percent": 12.0,
 "tax_rate_percent": 20.0,
 "revenue_growth_percent": 3.0,
 "cost_growth_percent": 2.0,
 "notes": "Doanh thu tƒÉng tr∆∞·ªüng ·ªïn ƒë·ªãnh"
}
"""

def ai_extract_from_text(full_text: str):
    client = get_gemini_client()
    if not client:
        return None, "Gemini client ch∆∞a s·∫µn s√†ng."
    try:
        prompt = f"""{EXTRACTION_SYSTEM_PROMPT}

--- VƒÇN B·∫¢N PH√ÇN T√çCH ---
{full_text}
"""
        resp = client.models.generate_content(
            model="gemini-2.5-flash",
            contents=prompt
        )
        raw = resp.text.strip()
        # Th·ª≠ t√¨m JSON trong vƒÉn b·∫£n tr·∫£ v·ªÅ
        import json, re
        # N·∫øu model tr·∫£ JSON thu·∫ßn: parse lu√¥n
        try:
            data = json.loads(raw)
        except:
            # T√¨m kh·ªëi { ... }
            m = re.search(r'\{.*\}', raw, flags=re.S)
            if not m:
                return None, f"Kh√¥ng t√¨m th·∫•y JSON trong ph·∫£n h·ªìi AI:\n{raw[:4000]}"
            data = json.loads(m.group(0))
        return data, None
    except APIError as e:
        return None, f"L·ªói g·ªçi Gemini API: {e}"
    except Exception as e:
        return None, f"L·ªói kh√¥ng x√°c ƒë·ªãnh khi tr√≠ch xu·∫•t: {e}"

def ai_analyze_metrics(metrics_payload_markdown: str):
    client = get_gemini_client()
    if not client:
        return "Gemini client ch∆∞a s·∫µn s√†ng."
    try:
        prompt = f"""
B·∫°n l√† chuy√™n gia th·∫©m ƒë·ªãnh d·ª± √°n. D·ª±a tr√™n c√°c ch·ªâ s·ªë v√† b·∫£ng d√≤ng ti·ªÅn ·ªü d∆∞·ªõi, 
h√£y ph√¢n t√≠ch ng·∫Øn g·ªçn (3‚Äì5 ƒëo·∫°n, m·ªói ƒëo·∫°n 2‚Äì3 c√¢u), t·∫≠p trung v√†o:
- m·ª©c t·∫°o gi√° tr·ªã (NPV), ƒë·ªô nh·∫°y theo WACC
- kh·∫£ nƒÉng ho√†n v·ªën (PP, DPP) so v·ªõi v√≤ng ƒë·ªùi d·ª± √°n
- ch·∫•t l∆∞·ª£ng l·ª£i nhu·∫≠n (IRR so v·ªõi WACC), r·ªßi ro v√† khuy·∫øn ngh·ªã

D·ªÆ LI·ªÜU:
{metrics_payload_markdown}
"""
        resp = client.models.generate_content(
            model="gemini-2.5-flash",
            contents=prompt
        )
        return resp.text
    except Exception as e:
        return f"Kh√¥ng th·ªÉ ph√¢n t√≠ch b·∫±ng AI: {e}"

# ================== GIAO DI·ªÜN: T·∫¢I WORD & TR√çCH XU·∫§T ==================
colL, colR = st.columns([2, 1])
with colL:
    uploaded = st.file_uploader("1) T·∫£i file Word (.docx) ph∆∞∆°ng √°n kinh doanh", type=["docx"])
    if Document is None:
        st.warning("Thi·∫øu th∆∞ vi·ªán `python-docx`. Vui l√≤ng c√†i: `pip install python-docx`")
with colR:
    st.info("M·∫πo: VƒÉn b·∫£n n√™n c√≥ c√°c khu v·ª±c ƒë·ªÅ c·∫≠p r√µ **v·ªën ƒë·∫ßu t∆∞**, **doanh thu**, **chi ph√≠**, **WACC**, **thu·∫ø**, **th·ªùi gian d·ª± √°n**.")

text_content = ""
if uploaded is not None and Document is not None:
    try:
        doc = Document(BytesIO(uploaded.read()))
        text_content = "\n".join([p.text for p in doc.paragraphs if p.text.strip() != ""])
        with st.expander("üìú Xem nhanh n·ªôi dung ƒë√£ t·∫£i"):
            st.write(text_content[:4000] + ("..." if len(text_content) > 4000 else ""))
    except Exception as e:
        st.error(f"Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c file Word: {e}")

st.markdown("---")
st.subheader("2) L·ªçc d·ªØ li·ªáu ƒë·∫ßu v√†o b·∫±ng AI")

extract_btn = st.button("üß† L·ªçc d·ªØ li·ªáu b·∫±ng AI", type="primary", disabled=(not text_content))

default_payload = {}
if extract_btn and text_content:
    with st.spinner("ƒêang tr√≠ch xu·∫•t th√¥ng tin t·ª´ vƒÉn b·∫£n b·∫±ng AI..."):
        data, err = ai_extract_from_text(text_content)
        if err:
            st.error(err)
        else:
            default_payload = data or {}

# Cho ph√©p hi·ªáu ch·ªânh tay (khi AI thi·∫øu/nh·∫ßm)
with st.form("manual_inputs"):
    st.caption("B·∫°n c√≥ th·ªÉ ch·ªânh s·ª≠a c√°c gi√° tr·ªã AI tr√≠ch xu·∫•t (n·∫øu c·∫ßn).")
    c1, c2, c3 = st.columns(3)
    investment_capex = c1.number_input("V·ªën ƒë·∫ßu t∆∞ (VND)", min_value=0.0, value=to_float_safe(default_payload.get("investment_capex"), 0.0), step=1e6, format="%.0f")
    project_life_years = int(c2.number_input("D√≤ng ƒë·ªùi d·ª± √°n (nƒÉm)", min_value=1, value=int(to_float_safe(default_payload.get("project_life_years"), 5))))
    wacc_percent = c3.number_input("WACC (%)", min_value=0.0, max_value=100.0, value=to_float_safe(default_payload.get("wacc_percent"), 12.0))
    tax_percent = c1.number_input("Thu·∫ø TNDN (%)", min_value=0.0, max_value=100.0, value=to_float_safe(default_payload.get("tax_rate_percent"), 20.0))
    revenue_growth = c2.number_input("TƒÉng tr∆∞·ªüng doanh thu (%/nƒÉm)", min_value=-100.0, max_value=100.0, value=to_float_safe(default_payload.get("revenue_growth_percent"), 0.0))
    cost_growth = c3.number_input("TƒÉng tr∆∞·ªüng chi ph√≠ (%/nƒÉm)", min_value=-100.0, max_value=100.0, value=to_float_safe(default_payload.get("cost_growth_percent"), 0.0))

    st.markdown("**Doanh thu & Chi ph√≠** (ch·ªçn *m·ªôt* trong hai c√°ch nh·∫≠p m·ªói m·ª•c):")
    d1, d2 = st.columns(2)
    rev_scalar = d1.number_input("Doanh thu nƒÉm 1 (VND) ‚Äì n·∫øu c·ªë ƒë·ªãnh/g·ªëc", min_value=0.0, value=to_float_safe(default_payload.get("revenues"), 0.0) if isinstance(default_payload.get("revenues"), (int, float, str)) else 0.0, step=1e6, format="%.0f")
    cost_scalar = d2.number_input("Chi ph√≠ nƒÉm 1 (VND) ‚Äì n·∫øu c·ªë ƒë·ªãnh/g·ªëc", min_value=0.0, value=to_float_safe(default_payload.get("costs"), 0.0) if isinstance(default_payload.get("costs"), (int, float, str)) else 0.0, step=1e6, format="%.0f")

    rev_list_str = d1.text_area("Ho·∫∑c danh s√°ch Doanh thu theo nƒÉm (ph√¢n t√°ch b·∫±ng d·∫•u ph·∫©y)", value=",".join([str(x) for x in default_payload.get("revenues", [])]) if isinstance(default_payload.get("revenues", None), list) else "")
    cost_list_str = d2.text_area("Ho·∫∑c danh s√°ch Chi ph√≠ theo nƒÉm (ph√¢n t√°ch b·∫±ng d·∫•u ph·∫©y)", value=",".join([str(x) for x in default_payload.get("costs", [])]) if isinstance(default_payload.get("costs", None), list) else "")

    submitted = st.form_submit_button("üöÄ T·∫°o b·∫£ng d√≤ng ti·ªÅn & t√≠nh ch·ªâ s·ªë", type="primary")

# Chu·∫©n h√≥a revenues/costs t·ª´ form
def parse_list_field(s):
    if not s or not s.strip():
        return None
    try:
        vals = [to_float_safe(v.strip(), 0.0) for v in s.split(",") if v.strip() != ""]
        return vals if len(vals) > 0 else None
    except:
        return None

if submitted:
    revenues_input = parse_list_field(rev_list_str) if parse_list_field(rev_list_str) is not None else rev_scalar
    costs_input = parse_list_field(cost_list_str) if parse_list_field(cost_list_str) is not None else cost_scalar

    try:
        df_cf, npv, irr, pp, dpp = build_cashflow_table(
            investment_capex=investment_capex,
            project_life_years=project_life_years,
            annual_revenues=revenues_input,
            annual_costs=costs_input,
            wacc=wacc_percent/100.0,
            tax_rate=tax_percent/100.0,
            revenue_growth=revenue_growth/100.0,
            cost_growth=cost_growth/100.0,
            depreciation_mode="straight_line"
        )

        st.subheader("3) B·∫£ng d√≤ng ti·ªÅn d·ª± √°n (FCFF)")
        st.dataframe(
            df_cf.style.format({
                "Doanh thu": "{:,.0f}",
                "Chi ph√≠": "{:,.0f}",
                "Kh·∫•u hao": "{:,.0f}",
                "EBIT": "{:,.0f}",
                "Thu·∫ø": "{:,.0f}",
                "FCFF": "{:,.0f}",
            }),
            use_container_width=True,
            height=420
        )

        st.subheader("4) Ch·ªâ s·ªë hi·ªáu qu·∫£ d·ª± √°n")
        m1, m2, m3, m4 = st.columns(4)
        m1.metric("NPV (VND)", f"{npv:,.0f}")
        m2.metric("IRR", f"{irr*100:.2f}%" if irr is not None else "‚Äî")
        m3.metric("PP (nƒÉm)", f"{pp:.2f}" if pp is not None else "‚Äî")
        m4.metric("DPP (nƒÉm)", f"{dpp:.2f}" if dpp is not None else "‚Äî")

        with st.expander("üì• T·∫£i v·ªÅ b·∫£ng d√≤ng ti·ªÅn (CSV)"):
            csv = df_cf.to_csv(index=False).encode("utf-8-sig")
            st.download_button("T·∫£i CSV", data=csv, file_name="cashflow.csv", mime="text/csv")

        # ============== PH√ÇN T√çCH AI ==============
        st.subheader("5) Ph√¢n t√≠ch b·ªüi AI")
        payload_md = pd.DataFrame({
            "Th√¥ng tin": ["V·ªën ƒë·∫ßu t∆∞", "D√≤ng ƒë·ªùi (nƒÉm)", "WACC", "Thu·∫ø", "NPV", "IRR", "PP", "DPP"],
            "Gi√° tr·ªã": [
                f"{investment_capex:,.0f}",
                f"{project_life_years}",
                f"{wacc_percent:.2f}%",
                f"{tax_percent:.2f}%",
                f"{npv:,.0f}",
                f"{irr*100:.2f}%" if irr is not None else "‚Äî",
                f"{pp:.2f}" if pp is not None else "‚Äî",
                f"{dpp:.2f}" if dpp is not None else "‚Äî",
            ]
        })
        st.dataframe(payload_md, use_container_width=True, height=260)

        if st.button("ü§ñ Y√™u c·∫ßu AI ph√¢n t√≠ch c√°c ch·ªâ s·ªë"):
            with st.spinner("AI ƒëang ph√¢n t√≠ch..."):
                # gh√©p th√™m b·∫£ng d√≤ng ti·ªÅn ·ªü d·∫°ng markdown
                md_cf = df_cf.to_markdown(index=False)
                md_all = payload_md.to_markdown(index=False) + "\n\n" + md_cf
                ai_text = ai_analyze_metrics(md_all)
                st.success("K·∫øt qu·∫£ ph√¢n t√≠ch t·ª´ AI:")
                st.write(ai_text)

    except ValueError as ve:
        st.error(f"L·ªói d·ªØ li·ªáu ƒë·∫ßu v√†o: {ve}")
    except Exception as e:
        st.error(f"Kh√¥ng th·ªÉ t·∫°o b·∫£ng d√≤ng ti·ªÅn / t√≠nh ch·ªâ s·ªë: {e}")
